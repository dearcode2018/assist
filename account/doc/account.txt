

业务需求
1) 自定义加密，复杂化，使用加密版本号，变更加密方法后，同时
变更版本记录.
2) 尽量将架构复杂化，防止快速理解
3) 源码和库数据尽量要加密，然后再上传
4) 数据库、缓存密码用密文方式
5) 目前IDE方式跑，以后可以打包成单独的项目，而直接反编译源码无法快速破解.
6) 紧急机制: 个人电脑丢失导致泄漏，应该即使启动紧急方案.


新增帐户
1) 基本信息
用户名、状态、输入密码、再次输入、级别(加密级别)、类型(帐号类型: 邮箱、金融、支付...)、
来源(组织、机构、渠道)、用途(使用场合/场景)、有效期至(到期或到期前1个月在列表栏红色提醒,为空则无限制)、、、、、、、、、、、、、、、、、、、、、、、、
2) 图片信息
最多支持6张图片，更新时需要做控制. 证件的正反面、单据、logo等图片.
3) 扩展信息
手机号码、邮箱、官网、登录入口(web登录地址、移动APP)、位置信息(全国通用/城市、地理位置...)、备注(说明、历史信息)、
关联帐号(填写若干个相关帐号，一般为内部字符、手机、邮箱、自定义字符)
4) 

接口设计
1) 级别、类型从数据字典接口获取
2) 图片从资源接口获取


技术架构
1) 技术组成
Spring + JPA(Hibernate)注解 + Cache(Redis) + JMail + Mysql + 



功能列表
1) 创建帐户
2) 关闭帐户: 保留帐户数据，修改状态为无效
3) 更新帐户: 修改基本信息、修改密码(可以增加验证-通过邮件的方式下发验证码)
4) 查询帐户: 查询基本信息，查询密码(可以增加验证-通过邮件的方式下发验证码)
5) 


技术方案: jpa(hibernate) + spring/mvc + jquery/ui + css + html
软件构成: mysql / redis / jdk / jetty / application

计划: 本地运行，2016年3月份之前上线
注意: 为了安全，不将其放在云平台上运行.

写成一个bat运行，配置环境和启动服务，打开浏览器链接.
正式上线之后，可以通过修改jetty或tomcat源码，阻止其打开的控制台窗口，这个需要研究其源码.
登录/注销、新增、编辑、查看、列表(搜索、停用)、查看密码(密码用图片流形式返回)、修改密码




